(load "maze_lib.lisp")

(defparameter *open* '())
(defparameter *closed* '())
(defparameter *id* 0)
(defparameter *ops* '((:Arriba 0)
                      (:Arriba-derecha 1)
                      (:Derecha 2)
                      (:Abajo-derecha 3)
                      (:Abajo 4)
                      (:Abajo-izquierda 5)
                      (:Izquierda 6)
                      (:Arriba-Izquierda 7)))
(defparameter *filas* (get-maze-rows))
(defparameter *columnas* (get-maze-cols))
(defparameter *current-ancestor*  nil)
(defparameter *contadorNodos* 0)
(defparameter *contadorExpandir* 0)
(defparameter *contadorFronteraBusqueda* 0)
(defparameter *tiempoInicial* 0)
(defparameter *tiempoFinal* 0)

(defun create-node (estado operador funcion)
  (incf *id*)
  (incf *contarNodos*)
  (list (1- *id*) estado *current-ancestor* (first operador) funcion))

(defun insert-to-open (estado operador metodo)
  (let ((nodo '()))
    (cond ((equal metodo :depth-first)
           (setq nodo (create-node estado operador nil))
           (push nodo *open*))
          ((equal metodo :breadth-first)
           (setq nodo (create-node estado operador nil))
           (setq *open* (append *open* (list nodo))))
          ((equal metodo :best-first)
           (setq nodo (create-node estado operador (moves-left *goal*)))
           (push nodo *open*)
           (order-open))
          ((equal metodo :A*)
           (setq nodo (create-node estado operador (A-star *goal*)))
           (push nodo *open*)
           (order-open))
          (T Nil))))

(defun get-from-open ()
  (pop *open*))

(defun valid-operator? (operador estado)
  (let ((ops (first operador)))
    (cond ((equal ops :Arriba)
           (cond ((= (aref estado 0) 0) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 4) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 5) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 6) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 7) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 12) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 13) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 14) nil)
                 ((= (get-cell-walls (1- (aref estado 0)) (aref estado 1)) 15) nil)
                 (T T)))
          ((equal ops :Abajo)
           (cond ((= (aref estado 0) (get-maze-rows)) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 1) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 3) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 5) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 7) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 9) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 11) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 13) nil)
                 ((= (get-cell-walls (1+ (aref estado 0)) (aref estado 1)) 15) nil)
                 (T T)))
